

#include <tchar.h>

#include "Mylist.h"
using namespace std;

#define stop __asm nop

int _tmain(int argc, _TCHAR* argv[])
{


			//Задание 2. 
			// Реализуйте шаблон стека - MyStack2 таким образом, чтобы 
			//для хранения элементов использовался ОДНОСВЯЗНЫЙ список.
			//Реализуйте возможность распечатать элементы стека в том порядке, в котором их заносил (push())
			//пользователь
			// 
			//Подсказка: 1. обязательными операциями со стеком являются "push" и "pop". 
			//           Реализуйте эти операции с помощью соответствующих методов.	
			//			 2. operator[] для такого стека реализовывать не нужно (почему?)
			//           3. зато нужно реализовать всю функциональность сложного класса (конструктор копирования, 
			//			 оператор присваивания, ...)

			// Проверьте работоспособность разработанного шаблона класса

		try {
		List<string> s1;
		s1.AddToTail(string("Aaa"));
		s1.AddToTail(string("Aaa"));
		s1.AddToTail(string("Bbb"));
		s1.AddToTail(string("Ccc"));
		s1.AddToTail(string("Ddd"));
		std::cout << s1;
		cout << "find:" << s1.find("Ddd") << endl;
	//	s1.remove(string("Ddd"));
		cout << "after remove" << endl;
		std::cout << s1;
		//	cout << "find:" << s1.find("Ddd") << endl;

		List<string> s2;
		cout << "find:" << s2.find("Ddd");
		s1.RemoveLast();
		

		std::cout << s1 << s2;

		s1 = s2;
		std::cout << s1;

		s1.RemoveLast();
		s2 = s1;
		std::cout << s2;
		cout << "find:" << s2.find("Ddd");
		List< string> s3(std::move(s1));
		std::cout << s3 << s1;

		s2.RemoveLast();
		s3 = std::move(s2);
		std::cout << s3 << s2;

		s2.RemoveLast();

	}

	catch (const std::exception& e) {
		std::cerr << e.what() << std::endl;
	}




	return 0;
}



// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
